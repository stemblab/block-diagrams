// Generated by CoffeeScript 1.4.0
(function() {
  var ArrowHead, Block, Bottom, Circle, Component, Coord, Drawing, ForeignObject, HCoord, Label, Labels, Left, Path, Right, SVG, Top, VCoord, drawingDevMode,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  drawingDevMode = true;

  if (typeof MathJaxProcessor !== "undefined" && MathJaxProcessor !== null) {
    MathJaxProcessor.mode = "SVG";
  }

  window.loadScript = function(name, moduleId) {
    var script, scriptId, t;
    if (moduleId == null) {
      moduleId = null;
    }
    if (!moduleId) {
      moduleId = $pz.module.id;
    }
    t = new Date().getTime();
    scriptId = "script_" + name;
    $("#" + scriptId).remove();
    script = $("<script>", {
      id: scriptId,
      src: ("puzlet/php/source.php?pageId=" + moduleId + "&file=" + name + ".js&t=") + t
    });
    return $(document.head).append(script);
  };

  puzletInit.register((function() {
    return window.$setupDrawing();
  }));

  SVG = (function() {

    function SVG() {}

    SVG.NS = "http://www.w3.org/2000/svg";

    SVG.element = function(type) {
      return document.createElementNS(this.NS, type);
    };

    SVG.attr = function(el, p, v) {
      return el.setAttributeNS(null, p, v);
    };

    SVG.get = function(el, p) {
      return el.getAttributeNS(null, p);
    };

    SVG.set = function(el, props) {
      var p, v, _results;
      _results = [];
      for (p in props) {
        v = props[p];
        _results.push(this.attr(el, p, v));
      }
      return _results;
    };

    return SVG;

  })();

  Drawing = (function() {

    function Drawing(s) {
      var scale, x, y, _ref, _ref1, _ref2, _ref3, _ref4;
      this.unit = (_ref = s.unit) != null ? _ref : 100;
      this.defaultOffset = 2 / 3 * this.unit;
      this.showJunctions = (_ref1 = s.showJunctions) != null ? _ref1 : false;
      this.defaultFill = (_ref2 = s.defaultFill) != null ? _ref2 : "yellow";
      this.canvas = $("#" + s.id);
      if (!this.canvas.length) {
        this.canvas = null;
        return;
      }
      this.canvas.empty();
      this.svg = SVG.element("svg");
      SVG.set(this.svg, {
        width: (_ref3 = s.width) != null ? _ref3 : 700,
        height: (_ref4 = s.height) != null ? _ref4 : 400
      });
      this.defs = SVG.element("defs");
      this.svg.appendChild(this.defs);
      new ArrowHead(this.defs);
      this.g = SVG.element("g");
      x = y = 0;
      scale = 1;
      SVG.set(this.g, {
        id: "drawing_svg",
        transform: "matrix(" + scale + ", 0, 0, " + scale + ", " + x + ", " + y + ")"
      });
      this.svg.appendChild(this.g);
      this.canvas[0].appendChild(this.svg);
      this.labels = new Labels;
    }

    Drawing.prototype.block = function(s) {
      var b, h, isSum, l, label, o, shape, size, type, w, _ref, _ref1, _ref2, _ref3, _ref4;
      if (s == null) {
        s = {};
      }
      o = s.o;
      l = (_ref = s.offset) != null ? _ref : this.defaultOffset;
      type = (_ref1 = s.type) != null ? _ref1 : "block";
      isSum = type === "sum";
      size = isSum ? this.unit / 2 : this.unit;
      w = (_ref2 = s.width) != null ? _ref2 : size;
      h = (_ref3 = s.height) != null ? _ref3 : size;
      shape = isSum ? "circle" : "rect";
      label = (_ref4 = s.label) != null ? _ref4 : (isSum ? "$\\small+$" : "");
      if (o.from != null) {
        b = o.from({
          line: l,
          width: w,
          height: h,
          shape: shape,
          label: label
        });
      } else {
        s.x = o[0];
        s.y = o[1];
        s.line = l;
        s.width = w;
        s.height = h;
        s.shape = shape;
        s.label = label;
        b = new Block(this, s);
      }
      return b;
    };

    Drawing.prototype.junc = function(spec) {
      var junction, label, mjLabel, o, s, show, size, _ref;
      if (spec == null) {
        spec = {};
      }
      o = spec.o;
      show = this.showJunctions;
      size = show ? 5 : 0.1;
      label = show ? spec.label : "";
      s = {
        line: (_ref = spec.offset) != null ? _ref : this.defaultOffset,
        width: size,
        height: size,
        label: "",
        noArrow: true
      };
      if (o.from != null) {
        junction = o.from(s);
      } else {
        s.x = o[0];
        s.y = o[1];
        junction = new Block(this, s);
      }
      mjLabel = "$\\scriptsize\\text{" + label + "}$";
      junction.top.label({
        label: mjLabel,
        width: 40,
        center: true
      });
      return junction;
    };

    Drawing.prototype.circle = function(s) {
      if (s == null) {
        s = {};
      }
      return new Circle(this, s);
    };

    Drawing.prototype.append = function(object) {
      return this.g.appendChild(object);
    };

    Drawing.prototype.addLabel = function(label) {
      return this.labels.append(label);
    };

    Drawing.prototype.shortcuts = function() {
      var block, connect, inp, junc, output,
        _this = this;
      block = function(s) {
        return _this.block(s);
      };
      junc = function(s) {
        return _this.junc(s);
      };
      connect = function(a, b) {
        return a.connect(b);
      };
      inp = function(s) {
        return s.o.inp(s);
      };
      output = function(s) {
        return s.o.out(s);
      };
      return [block, junc, connect, inp, output];
    };

    return Drawing;

  })();

  Coord = (function() {

    function Coord(drawing, x, y) {
      this.drawing = drawing;
      this.x = x;
      this.y = y;
      this.hGap = 8;
    }

    Coord.prototype.horizontal = function() {
      return null;
    };

    Coord.prototype.sameDimAs = function(c) {
      return this.horizontal === c.horizontal;
    };

    Coord.prototype.inp = function(s) {
      var from, to, _ref, _ref1;
      if (s == null) {
        s = {};
      }
      from = this.offset((_ref = s.line) != null ? _ref : this.drawing.defaultOffset);
      to = s.noArrow ? this.offset(0) : this.arrowOffset();
      if ((_ref1 = s.width) == null) {
        s.width = 50;
      }
      return this.line(from, to, from, s);
    };

    Coord.prototype.out = function(s) {
      var from, to, _ref, _ref1;
      if (s == null) {
        s = {};
      }
      from = this;
      to = this.offset((_ref = s.line) != null ? _ref : this.drawing.defaultOffset);
      if ((_ref1 = s.width) == null) {
        s.width = 50;
      }
      return this.line(from, to, to, s);
    };

    Coord.prototype.line = function(from, to, l, s) {
      l.lineLabel(s);
      return new Path(this.drawing, [from, to], s.noArrow);
    };

    Coord.prototype.lineLabel = function(s) {
      if (typeof s === "string") {
        s = {
          label: s
        };
      }
      s.center = true;
      return this.label(s);
    };

    Coord.prototype.labelYOffset = function(s) {
      return {
        hFactor: -0.5,
        gap: 0
      };
    };

    Coord.prototype.offset = function(l) {
      return this.coord(this.x - l, this.y);
    };

    Coord.prototype.labelX = function(s) {
      return this.x + this.hGap;
    };

    Coord.prototype.labelAlign = function(s) {
      return "left";
    };

    Coord.prototype.labelVAlign = function(s) {
      return null;
    };

    Coord.prototype.label = function(s) {
      var _ref, _ref1;
      return new Label(this.drawing, {
        x: this.labelX(s),
        y: this.y,
        yOffset: this.labelYOffset(s),
        width: this.width(s),
        height: (_ref = s.height) != null ? _ref : null,
        align: this.labelAlign(s),
        vAlign: this.labelVAlign(s),
        id: (_ref1 = s.id) != null ? _ref1 : null,
        mathjax: (typeof s === "string" ? s : s.label)
      });
    };

    Coord.prototype.width = function(s) {
      var _ref;
      return (_ref = s.width) != null ? _ref : 30;
    };

    Coord.prototype.coord = function(x, y) {
      return new Coord(this.drawing, x, y);
    };

    Coord.prototype.connect = function(to, noArrow) {
      var end, h, mid, path, x, y;
      if (noArrow == null) {
        noArrow = false;
      }
      end = noArrow ? to : to.arrowOffset();
      if (this.sameDimAs(to)) {
        path = [this, end];
      } else {
        h = this.horizontal();
        x = h ? to.x : this.x;
        y = h ? this.y : to.y;
        mid = this.coord(x, y);
        path = [this, mid, end];
      }
      return new Path(this.drawing, path, noArrow);
    };

    Coord.prototype.newBlock = function(s) {
      var block, c;
      c = this.newBlockOffset(s);
      s.x = c.x;
      s.y = c.y;
      return block = new Block(this.drawing, s);
    };

    Coord.prototype.from = function(s) {
      var block;
      block = this.newBlock(s);
      this.connect(block[this.pairWith()], s.noArrow);
      return block;
    };

    Coord.prototype.to = function(s) {
      var block;
      block = this.newBlock(s);
      block[this.pairWith()].connect(this, s.noArrow);
      return block;
    };

    Coord.prototype.newBlockOffset = function(s) {
      var _ref, _ref1;
      return this.offset(((_ref = s.line) != null ? _ref : 40) + ((_ref1 = s.width) != null ? _ref1 : Block.defaultSize.width) / 2);
    };

    Coord.prototype.arrowOffset = function() {
      return this.offset(2);
    };

    Coord.prototype.toString = function() {
      return "" + this.x + " " + this.y;
    };

    return Coord;

  })();

  HCoord = (function(_super) {

    __extends(HCoord, _super);

    function HCoord() {
      return HCoord.__super__.constructor.apply(this, arguments);
    }

    HCoord.prototype.horizontal = function() {
      return true;
    };

    HCoord.prototype.labelYOffset = function(s) {
      return {
        hFactor: (s.center ? -0.5 : -1),
        gap: (s.center ? 0 : -6)
      };
    };

    return HCoord;

  })(Coord);

  VCoord = (function(_super) {

    __extends(VCoord, _super);

    function VCoord() {
      return VCoord.__super__.constructor.apply(this, arguments);
    }

    VCoord.prototype.horizontal = function() {
      return false;
    };

    VCoord.prototype.labelX = function(s) {
      return this.x + (s.center ? 0 : this.hGap);
    };

    VCoord.prototype.labelAlign = function(s) {
      if (s.center) {
        return "center";
      } else {
        return "left";
      }
    };

    VCoord.prototype.newBlockOffset = function(s) {
      var _ref, _ref1;
      return this.offset(((_ref = s.line) != null ? _ref : 40) + ((_ref1 = s.height) != null ? _ref1 : Block.defaultSize.height) / 2);
    };

    return VCoord;

  })(Coord);

  Left = (function(_super) {

    __extends(Left, _super);

    function Left() {
      return Left.__super__.constructor.apply(this, arguments);
    }

    Left.prototype.labelX = function(s) {
      return this.x - this.hGap;
    };

    Left.prototype.labelAlign = function(s) {
      return "right";
    };

    Left.prototype.offset = function(l) {
      return new Left(this.drawing, this.x - l, this.y);
    };

    Left.prototype.pairWith = function() {
      return "right";
    };

    return Left;

  })(HCoord);

  Right = (function(_super) {

    __extends(Right, _super);

    function Right() {
      return Right.__super__.constructor.apply(this, arguments);
    }

    Right.prototype.offset = function(l) {
      return new Right(this.drawing, this.x + l, this.y);
    };

    Right.prototype.pairWith = function() {
      return "left";
    };

    return Right;

  })(HCoord);

  Top = (function(_super) {

    __extends(Top, _super);

    function Top() {
      return Top.__super__.constructor.apply(this, arguments);
    }

    Top.prototype.labelYOffset = function(s) {
      return {
        hFactor: -1,
        gap: -5
      };
    };

    Top.prototype.offset = function(l) {
      return new Top(this.drawing, this.x, this.y - l);
    };

    Top.prototype.pairWith = function() {
      return "bottom";
    };

    return Top;

  })(VCoord);

  Bottom = (function(_super) {

    __extends(Bottom, _super);

    function Bottom() {
      return Bottom.__super__.constructor.apply(this, arguments);
    }

    Bottom.prototype.labelYOffset = function(s) {
      return {
        hFactor: 0,
        gap: 5
      };
    };

    Bottom.prototype.offset = function(l) {
      return new Bottom(this.drawing, this.x, this.y + l);
    };

    Bottom.prototype.pairWith = function() {
      return "top";
    };

    return Bottom;

  })(VCoord);

  Path = (function() {

    function Path(drawing, coords, noArrow) {
      var c, coord, d, p, s, _i, _len, _ref;
      this.drawing = drawing;
      this.coords = coords;
      if (noArrow == null) {
        noArrow = false;
      }
      d = "";
      c = "M";
      _ref = this.coords;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        coord = _ref[_i];
        s = coord.toString();
        d += c + s;
        c = " L";
      }
      p = SVG.element("path");
      SVG.set(p, {
        d: d,
        style: "fill:none; stroke:black; stroke-width:2;"
      });
      if (!noArrow) {
        SVG.set(p, {
          "marker-end": "url(#arrowHead)"
        });
      }
      this.drawing.append(p);
    }

    return Path;

  })();

  Component = (function() {

    function Component(drawing, spec) {
      var h, tw, w, _ref, _ref1, _ref2, _ref3;
      this.drawing = drawing;
      this.spec = spec;
      this.x = (_ref = this.spec.x) != null ? _ref : 0;
      this.y = (_ref1 = this.spec.y) != null ? _ref1 : 0;
      this.center = new Coord(this.drawing, this.x, this.y);
      w = this.width();
      h = this.height();
      tw = w - 10;
      new Label(this.drawing, {
        mathjax: (_ref2 = this.spec.label) != null ? _ref2 : "",
        x: this.x,
        y: this.y,
        align: "center",
        vAlign: "middle"
      });
      this.draw();
      this.fill((_ref3 = this.spec.fill) != null ? _ref3 : this.drawing.defaultFill);
      this.left = new Left(this.drawing, this.x - w / 2, this.y);
      this.right = new Right(this.drawing, this.x + w / 2, this.y);
      this.top = new Top(this.drawing, this.x, this.y - h / 2);
      this.bottom = new Bottom(this.drawing, this.x, this.y + h / 2);
    }

    Component.prototype.width = function() {
      return this.spec.width;
    };

    Component.prototype.height = function() {
      return this.spec.height;
    };

    Component.prototype.draw = function() {};

    Component.prototype.style = function(style) {
      return SVG.set(this.svgElement, {
        style: style
      });
    };

    Component.prototype.fill = function(color) {
      return $(this.svgElement).css({
        fill: color
      });
    };

    return Component;

  })();

  Block = (function(_super) {

    __extends(Block, _super);

    function Block() {
      return Block.__super__.constructor.apply(this, arguments);
    }

    Block.defaultSize = {
      width: 150,
      height: 100
    };

    Block.prototype.width = function() {
      var _ref;
      return (_ref = this.spec.width) != null ? _ref : Block.defaultSize.width;
    };

    Block.prototype.height = function() {
      var _ref;
      return (_ref = this.spec.height) != null ? _ref : Block.defaultSize.height;
    };

    Block.prototype.draw = function() {
      var h, w;
      if (this.spec.shape === "circle") {
        this.svgElement = SVG.element("circle");
        SVG.set(this.svgElement, {
          cx: this.x,
          cy: this.y,
          r: this.width() / 2,
          style: "fill:white; stroke:black; stroke-width:1.5; " + "fill-opacity:0.1"
        });
      } else {
        this.svgElement = SVG.element("rect");
        w = this.width();
        h = this.height();
        SVG.set(this.svgElement, {
          x: this.x - w / 2,
          y: this.y - h / 2,
          width: w,
          height: h,
          style: "fill:white; stroke:black; stroke-width:1.5; " + "fill-opacity:0.1"
        });
      }
      return this.drawing.append(this.svgElement);
    };

    return Block;

  })(Component);

  Circle = (function(_super) {

    __extends(Circle, _super);

    function Circle() {
      return Circle.__super__.constructor.apply(this, arguments);
    }

    Circle.defaultRadius = 20;

    Circle.prototype.radius = function() {
      var _ref;
      return (_ref = this.spec.radius) != null ? _ref : Circle.defaultRadius;
    };

    Circle.prototype.width = function() {
      return 2 * this.radius();
    };

    Circle.prototype.height = function() {
      return this.width();
    };

    Circle.prototype.draw = function() {
      this.svgElement = SVG.element("circle");
      SVG.set(this.svgElement, {
        cx: this.x,
        cy: this.y,
        r: this.radius(),
        style: "fill:white; stroke:black; stroke-width:1.5; " + "fill-opacity:0.1"
      });
      return this.drawing.append(this.svgElement);
    };

    return Circle;

  })(Component);

  ForeignObject = (function() {

    function ForeignObject(drawing, spec) {
      var body;
      this.drawing = drawing;
      this.spec = spec;
      this.object = SVG.element("foreignObject");
      SVG.set(this.object, {
        x: this.spec.x,
        y: this.spec.y,
        width: this.spec.width,
        height: this.spec.height
      });
      this.drawing.append(this.object);
      body = document.createElement("body");
      body.setAttribute("xmlns", "http://www.w3.org/1999/xhtml");
      this.object.appendChild(body);
      this.body = $(body);
    }

    ForeignObject.prototype.append = function(object) {
      return this.body.append(object);
    };

    return ForeignObject;

  })();

  Labels = (function() {

    function Labels() {
      this.labels = [];
      this.container = $("#mathjax");
      this.container.empty();
    }

    Labels.prototype.append = function(label) {
      return this.labels.push(label);
    };

    return Labels;

  })();

  Label = (function() {

    Label.index = 0;

    function Label(drawing, spec) {
      var s;
      this.drawing = drawing;
      this.spec = spec;
      s = this.spec;
      if (!((s.mathjax != null) && s.mathjax.length)) {
        return;
      }
      if (s.mathjax.indexOf("$") === -1) {
        s.mathjax = "$\\text{" + s.mathjax + "}$";
      }
      this.drawing.addLabel(this);
      this.container = $("#mathjax");
      this.id = "block_diagram_label_" + Label.index;
      this.div = $("<div>", {
        id: this.id,
        html: s.mathjax
      });
      this.container.append(this.div);
      this.scale = 0.02;
      this.processMathJax();
      Label.index++;
    }

    Label.prototype.align = function() {
      var a, h, w, x, xo, y, yo;
      x = this.spec.x;
      y = this.spec.y;
      w = this.width();
      h = this.height();
      a = this.spec.align;
      xo = {
        left: 0,
        center: -w / 2,
        right: -w
      };
      this.x = x + (a ? xo[a] : 0);
      yo = this.spec.yOffset;
      return this.y = y + (yo ? yo.hFactor * h + yo.gap : -h / 2);
    };

    Label.prototype.clone = function() {
      var g;
      this.source = $("#" + this.id).find(".MathJax_SVG");
      if (!this.source.length) {
        return;
      }
      this.svg = this.source.find("svg").clone();
      this.div.remove();
      g = this.svg.find("g");
      this.group = $(g[0]).clone();
      this.align();
      this.translate(this.x, this.y);
      return $("#drawing_svg").append(this.group);
    };

    Label.prototype.viewBox = function() {
      return this.svg[0].viewBox;
    };

    Label.prototype.width = function() {
      return this.scale * this.viewBox().baseVal.width;
    };

    Label.prototype.height = function() {
      return this.scale * this.viewBox().baseVal.height;
    };

    Label.prototype.translate = function(dx, dy) {
      this.dx = dx;
      this.dy = dy;
      dy = this.dy + (-this.scale * this.viewBox().baseVal.y);
      return this.group[0].setAttribute("transform", "translate(" + this.dx + " " + dy + ") scale(" + this.scale + ") matrix(1 0 0 -1 0 0)");
    };

    Label.prototype.processMathJax = function() {
      var Hub, configElements, queue,
        _this = this;
      Hub = MathJax.Hub;
      queue = function(x) {
        return Hub.Queue(x);
      };
      queue(["PreProcess", Hub, this.id]);
      queue(["Process", Hub, this.id]);
      configElements = function() {
        return Hub.config.elements = [_this.id];
      };
      queue(configElements);
      return queue((function() {
        return _this.clone();
      }));
    };

    return Label;

  })();

  ArrowHead = (function() {

    function ArrowHead(defs) {
      var marker, path;
      this.defs = defs;
      marker = SVG.element("marker");
      this.defs.appendChild(marker);
      SVG.set(marker, {
        id: "arrowHead",
        viewBox: "0 0 30 20",
        refX: "25",
        refY: "10",
        markerUnits: "strokeWidth",
        markerWidth: 8,
        markerHeight: 6,
        orient: "auto",
        fill: "black"
      });
      path = SVG.element("path");
      SVG.set(path, {
        d: "M 0 0 L 30 10 L 0 20 z"
      });
      marker.appendChild(path);
    }

    return ArrowHead;

  })();

  window.$setupDrawing = function(redraw) {
    var draw, _ref;
    if (redraw == null) {
      redraw = false;
    }
    window.Drawing = Drawing;
    if (typeof MathJax !== "undefined" && MathJax !== null) {
      window.drawing();
      return;
    }
    draw = function() {
      var Hub;
      Hub = MathJax.Hub;
      Hub.config.MathMenu.settings.renderer = "SVG";
      Hub.Queue(["call", MathJax.Menu.Renderer]);
      return Hub.Queue([window.drawing]);
    };
    if (((_ref = $pz.event) != null ? _ref.mathjaxProcessed : void 0) != null) {
      return $pz.event.mathjaxProcessed.on(function() {
        return draw();
      });
    } else {
      return $(document).on("mathjaxPreConfig", function() {
        return MathJax.Hub.Register.StartupHook("MathMenu Ready", function() {
          return draw();
        });
      });
    }
  };

}).call(this);
