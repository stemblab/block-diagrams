{
  "id" : "b0088.28",
  "moduleIdx" : 248,
  "baseId" : "b0088.27",
  "name" : "Block Diagrams",
  "url" : "?id=b0088.28",
  "valid" : true,
  "editor" : "martin",
  "editorIp" : "58.28.155.63",
  "timestamp" : "2014-03-03 18:01:37",
  "isoTime" : "2014-03-03T18:01:37+13:00",
  "canAccessFolder" : true,
  "isSandbox" : false,
  "canCommit" : true,
  "share" : "gary",
  "isPublic" : true,
  "price" : null,
  "uses" : "b007c.5",
  "imports" : [
    {
      "id" : "b007c.5",
      "moduleIdx" : 221,
      "baseId" : "b007c.4",
      "name" : "Module Languages",
      "url" : "?id=b007c.5",
      "valid" : true,
      "editor" : "martin",
      "editorIp" : "58.28.155.63",
      "timestamp" : "2013-08-22 20:20:34",
      "isoTime" : "2013-08-22T20:20:34+12:00",
      "canAccessFolder" : true,
      "isSandbox" : false,
      "canCommit" : true,
      "share" : "gary",
      "isPublic" : true,
      "price" : null,
      "depth" : 1,
      "fromUses" : false,
      "importer" : "b0088.28"
    },
    {
      "id" : "b000n.5",
      "moduleIdx" : 20,
      "baseId" : "b000n.4",
      "name" : "HTML\/JavaScript definition",
      "url" : "?id=b000n.5",
      "valid" : true,
      "editor" : "martin",
      "editorIp" : "58.28.155.63",
      "timestamp" : "2012-08-19 12:17:24",
      "isoTime" : "2012-08-19T12:17:24+12:00",
      "canAccessFolder" : true,
      "isSandbox" : false,
      "canCommit" : true,
      "share" : null,
      "isPublic" : true,
      "price" : null,
      "depth" : 2,
      "fromUses" : false,
      "importer" : "b007c.5"
    },
    {
      "id" : "b006m.2",
      "moduleIdx" : 199,
      "baseId" : "b006m.1",
      "name" : "CoffeeScript definition",
      "url" : "?id=b006m.2",
      "valid" : true,
      "editor" : "martin",
      "editorIp" : "58.28.155.63",
      "timestamp" : "2012-12-10 13:59:29",
      "isoTime" : "2012-12-10T13:59:29+13:00",
      "canAccessFolder" : true,
      "isSandbox" : false,
      "canCommit" : true,
      "share" : null,
      "isPublic" : true,
      "price" : null,
      "depth" : 2,
      "fromUses" : false,
      "importer" : "b007c.5"
    },
    {
      "id" : "b000d.15",
      "moduleIdx" : 12,
      "baseId" : "b000d.14",
      "name" : "Python definition",
      "url" : "?id=b000d.15",
      "valid" : true,
      "editor" : "martin",
      "editorIp" : "58.28.155.63",
      "timestamp" : "2013-05-20 15:20:43",
      "isoTime" : "2013-05-20T15:20:43+12:00",
      "canAccessFolder" : true,
      "isSandbox" : false,
      "canCommit" : true,
      "share" : "gary",
      "isPublic" : true,
      "price" : null,
      "depth" : 2,
      "fromUses" : false,
      "importer" : "b007c.5"
    },
    {
      "id" : "b000g.10",
      "moduleIdx" : 14,
      "baseId" : "b000g.9",
      "name" : "Octave definition",
      "url" : "?id=b000g.10",
      "valid" : true,
      "editor" : "martin",
      "editorIp" : "58.28.155.63",
      "timestamp" : "2013-08-22 20:03:42",
      "isoTime" : "2013-08-22T20:03:42+12:00",
      "canAccessFolder" : true,
      "isSandbox" : false,
      "canCommit" : true,
      "share" : "gary",
      "isPublic" : true,
      "price" : null,
      "depth" : 2,
      "fromUses" : false,
      "importer" : "b007c.5"
    }
  ],
  "defs" : {
    "html" : {
      "src" : "b000n.5",
      "fileExt" : "html",
      "endToken" : "<!--puzlet_end-->",
      "endTokenExec" : "<!--puzlet_end-->",
      "passThru" : "true"
    },
    "javascript" : {
      "src" : "b000n.5",
      "fileExt" : "js",
      "endToken" : "\/\/!end",
      "endTokenExec" : "\/\/!end",
      "includeInHtmlHead" : "true"
    },
    "css" : {
      "src" : "b000n.5",
      "fileExt" : "css",
      "endToken" : "\/*!end*\/",
      "endTokenExec" : "\/*!end*\/",
      "includeInHtmlHead" : "true"
    },
    "coffee" : {
      "src" : "b006m.2",
      "fileExt" : "coffee",
      "endToken" : "#!end",
      "endTokenExec" : "#!end",
      "includeInHtmlHead" : "true"
    },
    "python" : {
      "src" : "b000d.15",
      "fileExt" : "py",
      "preamble" : "#!puzlet",
      "preambleExec" : "import puzlet",
      "postambleExec" : "puzlet.endScript()",
      "endToken" : "#!end",
      "endTokenExec" : "puzlet.end",
      "preProcessFileCommand" : "\nexport PYTHONPATH=..\/..\/..\/puzlet\/b000d.15; python ..\/..\/..\/puzlet\/b000d.15\/preprocessscript.py\n",
      "execFileCommand" : "\nexport PYTHONPATH=..\/..\/..\/puzlet\/b000d.15; python -W ignore::DeprecationWarning\n"
    },
    "octave" : {
      "src" : "b000g.10",
      "fileExt" : "m",
      "endToken" : "%!end",
      "endTokenExec" : "_end",
      "preProcessFileCommand" : "\nexport PYTHONPATH=..\/..\/..\/puzlet\/b000g.10; python ..\/..\/..\/puzlet\/b000g.10\/preprocessoctave.py\n",
      "execFileCommand" : "\noctave -H --no-line-editing -q\n"
    }
  },
  "exports" : null,
  "htmlResources" : "<script src='\/puzlet\/php\/source.php?pageId=b0088.28&file=drawing.js' type='text\/javascript'><\/script>\n",
  "usedModulePath" : [
    "..\/..\/..\/puzlet\/b007c.5",
    "..\/..\/..\/puzlet\/b000n.5",
    "..\/..\/..\/puzlet\/b006m.2",
    "..\/..\/..\/puzlet\/b000d.15",
    "..\/..\/..\/puzlet\/b000g.10"
  ],
  "codeNodes" : [
    {
      "id" : "1",
      "lang" : "coffee",
      "filename" : "drawing.coffee",
      "fileNoExt" : "drawing",
      "isExec" : false,
      "isScript" : false,
      "endToken" : "#!end",
      "idxInFile" : 0,
      "idxInPage" : 0,
      "codeBlockLength" : 509,
      "codeBlockStart" : 0,
      "show" : "1",
      "out" : "1",
      "code" : "drawingDevMode = true\nMathJaxProcessor?.mode = \"SVG\"\n\nwindow.loadScript = (name, moduleId=null) ->\n    moduleId = $pz.module.id unless moduleId\n    t = new Date().getTime()\n    scriptId = \"script_\" + name\n    $(\"#\"+scriptId).remove()\n    script = $ \"<script>\"\n\t    id: scriptId\n\t    src: \"puzlet\/php\/source.php?pageId=#{moduleId}&file=#{name}.js&t=\"+t\n    $(document.head).append script\n\n\npuzletInit.register (-> window.$setupDrawing())\n\nclass SVG\n\t\n\t@NS: \"http:\/\/www.w3.org\/2000\/svg\"\n\t\n\t@element: (type) -> document.createElementNS @NS, type\n\t\n\t@attr: (el, p, v) -> el.setAttributeNS null, p, v\n\t\n\t@get: (el, p) -> el.getAttributeNS null, p\n\t\n\t@set: (el, props) ->\n\t\tfor p, v of props\n\t\t\t@attr el, p, v\n\n\nclass Drawing\n\t\n\tconstructor: (s) ->\n\t\t\n\t\t@unit = s.unit ? 100\n\t\t@defaultOffset = 2\/3*@unit\n\t\t@showJunctions = s.showJunctions ? false\n\t\t@defaultFill = s.defaultFill ? \"yellow\"  # block fill color\n\t\t\n\t\t@canvas = $ \"#\"+s.id\n\t\tunless @canvas.length\n\t\t\t@canvas = null\n\t\t\treturn\n\t\t@canvas.empty()\n\t\t@svg = SVG.element \"svg\"\n\t\tSVG.set @svg,\n\t\t\twidth: s.width ? 700\n\t\t\theight: s.height ? 400\n\t\t@defs = SVG.element \"defs\"\n\t\t@svg.appendChild @defs\n\t\tnew ArrowHead @defs\n\t\t@g = SVG.element \"g\"\n\t\tx = y = 0\n\t\tscale = 1\n\t\tSVG.set @g,\n\t\t\tid: \"drawing_svg\"\n\t\t\ttransform: \"matrix(#{scale}, 0, 0, #{scale}, #{x}, #{y})\"\n\t\t@svg.appendChild @g\n\t\t@canvas[0].appendChild @svg\n\t\t@labels = new Labels\n\t\n\tblock: (s={}) ->\n\t\to = s.o\n\t\tl = s.offset ? @defaultOffset\n\t\ttype = s.type ? \"block\"\n\t\tisSum = type is \"sum\"  # Later, get from lookup.\n\t\tsize = if isSum then @unit\/2 else @unit\n\t\tw = s.width ? size\n\t\th = s.height ? size\n\t\tshape = if isSum then \"circle\" else \"rect\" \n\t\tlabel = s.label ? (if isSum then \"$\\\\small+$\" else \"\")\n\t\tif o.from?\n\t\t\t# Relative to another block position\n\t\t\tb = o.from\n\t\t\t\tline: l, width: w, height: h\n\t\t\t\tshape: shape\n\t\t\t\tlabel: label\n\t\telse\n\t\t\t# Coordinates specified\n\t\t\ts.x = o[0]\n\t\t\ts.y = o[1]\n\t\t\ts.line = l\n\t\t\ts.width = w\n\t\t\ts.height = h\n\t\t\ts.shape = shape\n\t\t\ts.label = label\n\t\t\tb = new Block this, s\n\t\tb\n\t\n\tjunc: (spec={}) ->\n\t\to = spec.o\n\t\tshow = @showJunctions\n\t\tsize = if show then 5 else 0.1\n\t\tlabel = if show then spec.label else \"\"\n\t\t#l = spec.offset ? line\n\t\ts =\n\t\t\tline: spec.offset ? @defaultOffset\n\t\t\twidth: size, height: size\n\t\t\tlabel: \"\"\n\t\t\tnoArrow: true\n\t\tif o.from?\n\t\t\t# Relative to another block position\n\t\t\tjunction = o.from s\n\t\telse\n\t\t\t# Coordinates specified\n\t\t\ts.x = o[0]\n\t\t\ts.y = o[1]\n\t\t\tjunction = new Block this, s\n\t\tmjLabel = \"$\\\\scriptsize\\\\text{#{label}}$\"\n\t\tjunction.top.label {label: mjLabel, width: 40, center: true}\n\t\tjunction\n\t\n\tcircle: (s={}) -> new Circle this, s\n\t\n\tappend: (object) -> @g.appendChild object\n\t\n\taddLabel: (label) -> @labels.append label\n\t\n\tshortcuts: ->\n\t\tblock = (s) => @block s\n\t\tjunc = (s) => @junc s\n\t\tconnect = (a, b) -> a.connect b\n\t\tinp = (s) -> s.o.inp s\n\t\toutput = (s) -> s.o.out s  \n\t\t[block, junc, connect, inp, output]\n\t\n\n\nclass Coord\n\t\n\tconstructor: (@drawing, @x, @y) ->\n\t\t@hGap = 8\n\t\t\n\thorizontal: -> null\n\tsameDimAs: (c) -> @horizontal is c.horizontal \n\t\n\tinp: (s={}) ->\n\t\tfrom = @offset (s.line ? @drawing.defaultOffset)\n\t\tto = if s.noArrow then @offset 0 else @arrowOffset()\n\t\ts.width ?= 50\n\t\t@line from, to, from, s\n\t\t\n\tout: (s={}) ->\n\t\tfrom = this\n\t\tto = @offset (s.line ? @drawing.defaultOffset)\n\t\ts.width ?= 50\n\t\t@line from, to, to, s\n\t\t\n\tline: (from, to, l, s) ->\n\t\tl.lineLabel s\n\t\tnew Path @drawing, [from, to], s.noArrow\t  \n\t\t\n\tlineLabel: (s) ->\t\t \n\t\ts = {label: s} if typeof(s) is \"string\"\n\t\ts.center = true\n\t\t@label s\n\t   \n\t# Parameters for translating label y-coord\n\t# hFactor: height, yGap: offset\n\tlabelYOffset: (s) -> hFactor: -0.5, gap: 0\n\t\n\toffset: (l) -> @coord @x-l, @y\n\t\n\tlabelX: (s) -> @x + @hGap\n\tlabelAlign: (s) -> \"left\"\n\tlabelVAlign: (s) -> null  # not implemented yet\n\tlabel: (s) ->\n\t\tnew Label @drawing,\n\t\t\tx: @labelX s\n\t\t\ty: @y\n\t\t\tyOffset: @labelYOffset s\n\t\t\twidth:\t@width s\n\t\t\theight: s.height ? null\n\t\t\talign: @labelAlign s\n\t\t\tvAlign: @labelVAlign s\n\t\t\tid: s.id ? null\n\t\t\tmathjax: (if typeof(s) is \"string\" then s else s.label)\n\t\n\twidth: (s) -> s.width ? 30\n\t\n\tcoord: (x, y) -> new Coord @drawing, x, y\n\t\n\tconnect: (to, noArrow=false) ->\n\t\tend = if noArrow then to else to.arrowOffset() \n\t\tif @sameDimAs to\n\t\t\tpath = [this, end]\n\t\telse\n\t\t\th = @horizontal()\n\t\t\tx = if h then to.x else @x\n\t\t\ty = if h then @y else to.y\n\t\t\tmid = @coord x, y\n\t\t\tpath = [this, mid, end]\n\t\tnew Path @drawing, path, noArrow\n\t\t\n\tnewBlock: (s) ->\n\t\tc = @newBlockOffset s\n\t\ts.x = c.x\n\t\ts.y = c.y\n\t\tblock = new Block @drawing, s\n\t\t\n\tfrom: (s) -> \n\t\tblock = @newBlock s\n\t\t@connect block[@pairWith()], s.noArrow\n\t\tblock\n\t\t\n\tto: (s) -> \n\t\tblock = @newBlock s\n\t\tblock[@pairWith()].connect this, s.noArrow \n\t\tblock\n\t\t\n\tnewBlockOffset: (s) ->\n\t\t@offset (s.line ? 40) + (s.width ? Block.defaultSize.width)\/2\n\t\t\t\t\n\tarrowOffset: -> @offset 2\n\t\n\ttoString: -> \"#{@x} #{@y}\"\n\nclass HCoord extends Coord\n\thorizontal: -> true\n\tlabelYOffset: (s) ->\n\t\thFactor: (if s.center then -0.5 else -1)\n\t\tgap: (if s.center then 0 else -6)\n\nclass VCoord extends Coord\n\thorizontal: -> false\n\tlabelX: (s) -> @x + (if s.center then 0 else @hGap)\n\tlabelAlign: (s) -> (if s.center then \"center\" else \"left\")\n\tnewBlockOffset: (s) ->\n\t\t@offset (s.line ? 40) + (s.height ? Block.defaultSize.height)\/2\n\nclass Left extends HCoord\n\tlabelX: (s) -> @x - @hGap\n\tlabelAlign: (s) -> \"right\"\n\toffset: (l) -> new Left @drawing, @x-l, @y\n\tpairWith: -> \"right\"\n\nclass Right extends HCoord\n\toffset: (l) -> new Right @drawing, @x+l, @y\n\tpairWith: -> \"left\"\n\nclass Top extends VCoord\n\tlabelYOffset: (s) -> hFactor: -1, gap: -5\n\toffset: (l) -> new Top @drawing, @x, @y-l\n\tpairWith: -> \"bottom\"\n\nclass Bottom extends VCoord\n\tlabelYOffset: (s) -> hFactor: 0, gap: 5\n\toffset: (l) -> new Bottom @drawing, @x, @y+l\n\tpairWith: -> \"top\"\n\n\nclass Path\n\t\n\tconstructor: (@drawing, @coords, noArrow=false) ->\n\t\td = \"\"\n\t\tc = \"M\"\n\t\tfor coord in @coords\n\t\t\ts = coord.toString()\n\t\t\td += c + s \n\t\t\tc = \" L\"\n\t\tp = SVG.element \"path\"\n\t\tSVG.set p,\n\t\t\td: d\n\t\t\tstyle: \"fill:none; stroke:black; stroke-width:2;\"\n\t\tSVG.set p, \"marker-end\": \"url(#arrowHead)\" unless noArrow\n\t\t@drawing.append p\n\n\nclass Component\n\t\n\tconstructor: (@drawing, @spec) ->\n\t\t\n\t\t@x = @spec.x ? 0\n\t\t@y = @spec.y ? 0\n\t\t@center = new Coord @drawing, @x, @y\n\t\t\n\t\tw = @width()\n\t\th = @height()\n\t\t\t\t\n\t\ttw = w - 10\n\t\tnew Label @drawing,\n\t\t\tmathjax: @spec.label ? \"\"\n\t\t\tx: @x\n\t\t\ty: @y\n\t\t\talign: \"center\"\n\t\t\tvAlign: \"middle\"\n\t\t\n\t\t@draw()\n\t\t@fill @spec.fill ? @drawing.defaultFill\n\t\t\n\t\t@left = new Left @drawing, @x-w\/2, @y\n\t\t@right = new Right @drawing, @x+w\/2, @y\n\t\t@top = new Top @drawing, @x, @y-h\/2\n\t\t@bottom = new Bottom @drawing, @x, @y+h\/2\n\t\t\n\twidth: -> @spec.width\n\theight: -> @spec.height\n\t\n\tdraw: -> # Defined by subclass\n\t\n\tstyle: (style) -> SVG.set @svgElement, style: style\n\t\n\tfill: (color) -> \n\t\t$(@svgElement).css fill: color\n\n\nclass Block extends Component\n\t\n\t@defaultSize: {width: 150, height: 100}\n\t\n\twidth: -> @spec.width ? Block.defaultSize.width\n\theight: -> @spec.height ? Block.defaultSize.height\n\t\n\tdraw: ->\n\t\tif @spec.shape is \"circle\"\n\t\t\t@svgElement = SVG.element \"circle\"\n\t\t\tSVG.set @svgElement,\n\t\t\t\tcx: @x\n\t\t\t\tcy: @y\n\t\t\t\tr: @width()\/2\n\t\t\t\tstyle: \"fill:white; stroke:black; stroke-width:1.5; \"+\n\t\t\t\t\t\"fill-opacity:0.1\"\n\t\telse\n\t\t\t@svgElement = SVG.element \"rect\"\n\t\t\tw = @width()\n\t\t\th = @height()\n\t\t\tSVG.set @svgElement,\n\t\t\t\tx: @x - w\/2\n\t\t\t\ty: @y - h\/2\n\t\t\t\twidth: w\n\t\t\t\theight: h\n\t\t\t\tstyle: \"fill:white; stroke:black; stroke-width:1.5; \"+\n\t\t\t\t\t\"fill-opacity:0.1\"\n\t\t@drawing.append @svgElement\n\n\nclass Circle extends Component\n\t\n\t@defaultRadius: 20\n\t\t\n\tradius: -> @spec.radius ? Circle.defaultRadius\n\twidth: -> 2*@radius()\n\theight: -> @width()\n\t\n\tdraw: ->\n\t\t@svgElement = SVG.element \"circle\"\n\t\tSVG.set @svgElement,\n\t\t\tcx: @x\n\t\t\tcy: @y\n\t\t\tr: @radius()\n\t\t\tstyle: \"fill:white; stroke:black; stroke-width:1.5; \"+\n\t\t\t\t\"fill-opacity:0.1\"\n\t\t@drawing.append @svgElement\n\n\nclass ForeignObject\n\t\n\tconstructor: (@drawing, @spec) ->\n\t\t@object = SVG.element \"foreignObject\"\n\t\tSVG.set @object,\n\t\t\tx: @spec.x\n\t\t\ty: @spec.y\n\t\t\twidth: @spec.width\n\t\t\theight: @spec.height \n\t\t@drawing.append @object\n\t\tbody = document.createElement \"body\"\n\t\tbody.setAttribute \"xmlns\", \"http:\/\/www.w3.org\/1999\/xhtml\"\n\t\t@object.appendChild body\n\t\t@body = $ body\n\t\t\n\tappend: (object) -> @body.append object \n\n\nclass Labels\n\t\n\tconstructor: ->\n\t\t@labels = []\n\t\t@container = $ \"#mathjax\"\n\t\t@container.empty()\n\t\n\tappend: (label) -> @labels.push label\n\n\nclass Label\n\t\n\t@index: 0\n\t\n\tconstructor: (@drawing, @spec) ->\n\t\ts = @spec\n\t\treturn unless s.mathjax? and s.mathjax.length\n\t\t# Make mathjax text if not $$.\n\t\t# Later, support text\/links etc.\n\t\tif s.mathjax.indexOf(\"$\") is -1\n\t\t\ts.mathjax = \"$\\\\text{#{s.mathjax}}$\"\n\t\t@drawing.addLabel this\n\t\t\n\t\t@container = $ \"#mathjax\"\n\t\t\n\t\t@id = \"block_diagram_label_\"+Label.index\n\t\t@div = $ \"<div>\"\n\t\t\tid: @id\n\t\t\thtml: s.mathjax\n\t\t@container.append @div\n\t\t\n\t\t@scale = 0.02\n\t\t\n\t\t@processMathJax()\n\t\t\n\t\t# obj here?\n\t\t\n\t\tLabel.index++\n\t\n\talign: ->\n        \t\t\n\t\tx = @spec.x\n\t\ty = @spec.y\n\t\tw = @width()\n\t\th = @height()\n\t\t\n\t\ta = @spec.align\n\t\t\n\t\txo = {\n\t\t\tleft: 0\n\t\t\tcenter: -w\/2\n\t\t\tright: -w\n\t\t}\n\t\t@x = x + (if a then xo[a] else 0)\n\t\t\n\t\t# Todo: use valign (middle, top, bottom).\n\t\tyo = @spec.yOffset\n\t\t@y = y + (if yo then yo.hFactor*h + yo.gap else -h\/2)\n\t\t\n\tclone: ->\n\t\t@source = $(\"##{@id}\").find \".MathJax_SVG\"\n\t\treturn unless @source.length\n\t\t@svg = @source.find(\"svg\").clone()\n\t\t@div.remove()  # Clear original MathJax\n\t\tg = @svg.find \"g\"\n\t\t@group = $(g[0]).clone()\n\t\t@align()\n\t\t@translate @x, @y \n\t\t$(\"#drawing_svg\").append @group\n\t\t\n\tviewBox: -> @svg[0].viewBox\n\t\n\twidth: -> @scale * @viewBox().baseVal.width\n\t\n\theight: -> @scale * @viewBox().baseVal.height\n\t\n\ttranslate: (@dx, @dy) ->\n\t\tdy = @dy + (-@scale * @viewBox().baseVal.y)\n\t\t@group[0].setAttribute \"transform\", \n\t\t\t\"translate(#{@dx} #{dy}) scale(#{@scale}) matrix(1 0 0 -1 0 0)\"\n\t\t\n\tprocessMathJax: ->\n\t\tHub = MathJax.Hub\n\t\tqueue = (x) -> Hub.Queue x\n\t\tqueue [\"PreProcess\", Hub, @id]\n\t\tqueue [\"Process\", Hub, @id]\n\t\tconfigElements = => Hub.config.elements = [@id]\n\t\tqueue configElements\n\t\tqueue (=> @clone())\n\t\t\n\n\nclass ArrowHead\n\t\n\tconstructor: (@defs) ->\n\t\tmarker = SVG.element \"marker\"\n\t\t@defs.appendChild marker\n\t\tSVG.set marker,\n\t\t\tid: \"arrowHead\"\n\t\t\tviewBox: \"0 0 30 20\"\n\t\t\trefX: \"25\"\n\t\t\trefY: \"10\"\n\t\t\tmarkerUnits: \"strokeWidth\"\n\t\t\tmarkerWidth: 8\n\t\t\tmarkerHeight: 6\n\t\t\torient: \"auto\"\n\t\t\tfill: \"black\"\n\t\tpath = SVG.element \"path\"\n\t\tSVG.set path, d: \"M 0 0 L 30 10 L 0 20 z\"\n\t\tmarker.appendChild path\n\n\nwindow.$setupDrawing = (redraw=false) ->\n        \t\n    window.Drawing = Drawing\n\t\t\n    if MathJax?\n        window.drawing()\n        return\n\t\t\n    draw = ->\n        Hub = MathJax.Hub\n        Hub.config.MathMenu.settings.renderer = \"SVG\"\n        Hub.Queue [\"call\", MathJax.Menu.Renderer]\n        Hub.Queue [window.drawing]\n\t\t\n    if $pz.event?.mathjaxProcessed?\n        $pz.event.mathjaxProcessed.on -> draw()\n    else\n        $(document).on \"mathjaxPreConfig\", ->\n            MathJax.Hub.Register.StartupHook \"MathMenu Ready\", ->\n                draw()"
    }
  ]
}